# Docker Compose configuration for CloudBoard
# This demonstrates how the application would be containerized in a real deployment

version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - cloudboard-network

  # FastAPI Backend (conceptual - would be implemented separately)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://cloudboard:password@postgres:5432/cloudboard
      - JWT_SECRET_KEY=your-secret-key-here
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      - postgres
      - redis
    networks:
      - cloudboard-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cloudboard
      - POSTGRES_USER=cloudboard
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cloudboard-network

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloudboard-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - cloudboard-network

volumes:
  postgres_data:
  redis_data:

networks:
  cloudboard-network:
    driver: bridge